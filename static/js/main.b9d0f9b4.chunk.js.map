{"version":3,"sources":["components/Chart.js","services/CovidService.js","App.js","reportWebVitals.js","index.js"],"names":["MyChart","props","options","chart","type","height","animations","enabled","easing","speed","animateGradually","delay","dynamicAnimation","plotOptions","bar","barHeight","distributed","horizontal","dataLabels","position","textAnchor","style","colors","formatter","val","opt","w","globals","labels","dataPointIndex","offsetX","dropShadow","xaxis","show","categories","yaxis","series","name","data","id","fetchCovidAPI","day","a","axios","get","process","Container","styled","div","App","useState","updateData","setCategoris","count","setCount","date","setDate","fetchData","console","log","dataArr","covidWithDay","sort","b","covidTimelineCase","updatedData","map","updatedCategories","country","useEffect","Math","abs","interval","setInterval","window","clearInterval","className","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9d0f9b4.chunk.js","sourcesContent":["import Chart from \"react-apexcharts\";\r\n\r\nexport default function MyChart(props) {\r\n  const options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      height: \"100%\",\r\n      animations: {\r\n        enabled: true,\r\n        easing: \"easeinout\",\r\n        speed: 800,\r\n        animateGradually: {\r\n          enabled: true,\r\n          delay: 150,\r\n        },\r\n        dynamicAnimation: {\r\n          enabled: true,\r\n          speed: 2000,\r\n        },\r\n      },\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        barHeight: \"100%\",\r\n        distributed: true,\r\n        horizontal: true,\r\n        dataLabels: {\r\n          position: \"bottom\",\r\n        },\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      textAnchor: \"start\",\r\n      style: {\r\n        colors: [\"#fff\"],\r\n      },\r\n      formatter: function (val, opt) {\r\n        return opt.w.globals.labels[opt.dataPointIndex] + \":  \" + val + \" Cases\";\r\n      },\r\n      offsetX: 0,\r\n      dropShadow: {\r\n        enabled: true,\r\n      },\r\n    },\r\n    xaxis: {\r\n      labels: {\r\n        show: false,\r\n      },\r\n      categories: props.categories,\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        show: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: \"xx\",\r\n      data: props.data,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div id=\"chart\">\r\n      <Chart options={options} series={series} type=\"bar\" />\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst fetchCovidAPI = async (day) => {\r\n  const { data } = await axios.get(\r\n    `${process.env.REACT_APP_API_URL}/covid/${day}`\r\n  );\r\n  return data;\r\n};\r\n\r\nexport { fetchCovidAPI };\r\n","import { useState, useEffect } from \"react\";\nimport MyChart from \"./components/Chart\";\nimport { fetchCovidAPI } from \"./services/CovidService\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nfunction App() {\n  const [data, updateData] = useState([]);\n  const [categories, setCategoris] = useState([]);\n  const [count, setCount] = useState(30);\n  const [date, setDate] = useState(\"\");\n\n  async function fetchData() {\n    if (count % 30 !== 0) {\n      console.log(count);\n      const data = await fetchCovidAPI(count % 30);\n      let dataArr = data.covidWithDay;\n      dataArr = dataArr.sort((a, b) =>\n        a.covidTimelineCase > b.covidTimelineCase\n          ? -1\n          : a.covidTimelineCase < b.covidTimelineCase\n          ? 1\n          : 0\n      );\n\n      const updatedData = dataArr.map((data) => data.covidTimelineCase);\n      const updatedCategories = dataArr.map((data) => data.country);\n\n      updateData(updatedData);\n      setCategoris(updatedCategories);\n      setDate(data.date);\n    }\n  }\n  useEffect(() => {\n    setCount(Math.abs(count - 1));\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (count - 1 === -1) {\n        setCount(30);\n      } else {\n        setCount(count - 1);\n      }\n      fetchData();\n    }, 100);\n    return () => {\n      window.clearInterval(interval);\n    };\n  }, [count]);\n  return (\n    <Container>\n      <p>Covid Global Base By SGN </p>\n      <p> {date}</p>\n      <div className=\"row\">\n        <div className=\"mixed-chart\">\n          <MyChart data={data} categories={categories} type=\"bar\" width=\"500\" />\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  p {\n    text-align: center;\n    font-size: 1.2rem;\n  }\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}